#---------------------------------*- sh -*-------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 2011-2018 OpenFOAM Foundation
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     RunFunctions
#
# Description
#     Miscellaneous functions for running tutorial cases
#------------------------------------------------------------------------------

isTest()
{
    for i in "$@"; do
        if [ "$i" = "-test" ]
        then
            return 0
        fi
    done
    return 1
}

getNumberOfProcessors()
{
    foamDictionary -case ${FOAM_CASE:?} -disableFunctionEntries -entry numberOfSubdomains -value system/decomposeParDict
}

getApplication()
{
    foamDictionary -case ${FOAM_CASE:?} -disableFunctionEntries -entry application -value system/controlDict
}

runApplication()
{
    APP_RUN=
    LOG_IGNORE=false
    LOG_APPEND=false
    LOG_SUFFIX=

    # Parse options and executable
    while [ $# -gt 0 ] && [ -z "$APP_RUN" ]; do
        key="$1"
        case "$key" in
            -append|-a)
                LOG_IGNORE=true
                LOG_APPEND=true
                ;;
            -overwrite|-o)
                LOG_IGNORE=true
                ;;
            -suffix|-s)
                LOG_SUFFIX=".$2"
                shift
                ;;
            *)
                APP_RUN="$key"
                APP_NAME="${key##*/}"
                LOG_SUFFIX="${APP_NAME}${LOG_SUFFIX}"
                ;;
        esac

        shift
    done
    LOG=${FOAM_LOGS:?}/log.${LOG_SUFFIX}
    if [ -f ${LOG} ] && [ "$LOG_IGNORE" = "false" ]
    then
        echo "Log for $APP_NAME already exists:" \
             "remove log file '${LOG}' to re-run"
    else
        echo "Running $APP_RUN on ${FOAM_CASE:?}"
        if [ "$LOG_APPEND" = "true" ]; then
            $APP_RUN -case ${FOAM_CASE:?} "$@" >> $LOG 2>&1
        else
            $APP_RUN -case ${FOAM_CASE:?} "$@" > $LOG 2>&1
        fi
    fi
}

runParallel()
{
    APP_RUN=
    LOG_IGNORE=false
    LOG_APPEND=false
    LOG_SUFFIX=
    nProcs=$(getNumberOfProcessors)

    # Parse options and executable
    while [ $# -gt 0 ] && [ -z "$APP_RUN" ]; do
        key="$1"
        case "$key" in
            -append|-a)
                LOG_IGNORE=true
                LOG_APPEND=true
                ;;
            -overwrite|-o)
                LOG_IGNORE=true
                ;;
            -suffix|-s)
                LOG_SUFFIX=".$2"
                shift
                ;;
            -np|-n)
                nProcs="$2"
                shift
                ;;
            *)
                APP_RUN="$key"
                APP_NAME="${key##*/}"
                LOG_SUFFIX="${APP_NAME}${LOG_SUFFIX}"
                ;;
        esac

        shift
    done
    
    LOG=${FOAM_LOGS:?}/log.${LOG_SUFFIX}
    
    if [ -f ${LOG} ] && [ "$LOG_IGNORE" = "false" ]
    then
        echo "Log for $APP_NAME already exists:" \
             "remove log file ${LOG} to re-run"
    else
        echo "Running $APP_RUN in parallel on ${FOAM_CASE:?} using $nProcs processes"
        if [ "$LOG_APPEND" = "true" ]; then
            ( mpirun -np $nProcs $APP_RUN -case ${FOAM_CASE:?} -parallel "$@" < /dev/null >> ${LOG} 2>&1 )
        else
            ( mpirun -np $nProcs $APP_RUN -case ${FOAM_CASE:?} -parallel "$@" < /dev/null > ${LOG} 2>&1 )
        fi
    fi
}

compileApplication()
{
    echo "Compiling $1 application"
    wmake $1
}

cloneCase()
{
    if [ -d $2 ]
    then
        echo "Case already cloned: remove case directory $2 to clone"
    else
        echo "Cloning $2 case from $1"
        mkdir $2
        cpfiles="0 system constant"
        for f in $cpfiles
        do
            cp -r $1/$f $2
        done
    fi
}

transposeFile()
{
    awk '
    {
        for (i = 1; i <= NF; i++)
        {
            a[NR, i] = $i
        }
    }

    NF > p {p = NF}

    END {
            for (j = 1; j <= p; j++)
            {
                str = a[1,j]

                for(i = 2; i <= NR; i++)
                {
                    str = str" "a[i,j];
                }

                print str
            }
        }' $1
}

#------------------------------------------------------------------------------
